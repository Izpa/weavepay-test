{"version":3,"sources":["schema.cljc"],"mappings":";AAMA,kBAAA,lBAAMA,4CACHC,WAAOC;AADV,AAEE,oBAAU,AAACC,kDAAWF,WAAOC;AAA7B;;AAAA,AACE,OAACE,mDAAY,AAACC,iDAAUJ,WAAOC;;;AAEnC,sBAAA,mFAAA,mDAAA,mFAAA,qDAAA,mFAAA,gDAAA,0DAAA,mFAAA,yDAAA,7mBAAKI;AAIL,uBAAA,mFAAA,mDAAA,mFAAA,8CAAA,2CAAA,6DAAA,aAAA,kEAAA,mFAAA,wDAAA,2CAAA,6DAAA,aAAA,mFAAA,gDAAA,oDAAA,mFAAA,gDAAA,gCAAA,mFAAA,wDAAA,2CAAA,6DAAA,aAAA,mFAAA,gDAAA,oDAAA,mFAAA,gDAAA,zmDAAKC;AAML,sBAAA,mFAAA,mDAAA,2CAAA,yDAAA,cAAA,mFAAA,wFAAA,kEAAA,mFAAA,4EAAA,kEAAA,mFAAA,gEAAA,kEAAA,mFAAA,+DAAA,2CAAA,6DAAA,aAAA,xrCAAKC;AAQL,yBAAA,mFAAA,5GAAKC,qKACMD;AAEX,0BAAA,mFAAA,mDAAA,mFAAA,4FAAA,kEAAA,mFAAA,iFAAA,kEAAA,mFAAA,0EAAA,kEAAA,mFAAA,kEAAA,2CAAA,6DAAA,aAAA,hmCAAKE;AAOL,uBAAA,mFAAA,mDAAA,mFAAA,sFAAA,mFAAA,sEAAA,/dAAKC,qSAEKC;AAGV,gBAAA,mFAAA,mDAAA,mFAAA,4FAAA,2DAAA,mFAAA,6EAAA,2DAAA,mFAAA,0EAAA,2DAAA,mFAAA,uEAAA,2DAAA,mFAAA,iFAAA,2DAAA,mFAAA,+FAAA,z5CAAKC;AASL,iCAAA,2CAAA,5EAAKC,oIACKR;AAEV,kCAAA,2CAAA,7EAAKS,qIACKR;AAEV,uBAAA,2CAAA,sDAAA,mFAAA,mDAAA,mFAAA,oDAAA,mFAAA,iGAAA,mFAAA,4DAAA,mFAAA,3xBAAKS,ihBAGYN,mUACYA;AAE7B,2BAAA,2CAAA,sDAAA,mFAAA,mDAAA,mFAAA,6DAAA,mFAAA,iGAAA,mFAAA,uDAAA,htBAAKO,8hBAGmBP;AAGxB,AAAAQ,oEAAA,sGAAA,WAAwDC,EAAEA;AAA1D,AAA6DL;;AAC7D,AAAAI,oEAAA,wGAAA,WAAyDC,EAAEA;AAA3D,AAA8DJ;;AAC9D,AAAAG,oEAAA,kFAAA,WAA8CC,EAAEA;AAAhD,AAAmDH;;AACnD,AAAAE,oEAAA,0FAAA,WAAkDC,EAAEA;AAApD,AAAuDF","names":["schema/validate","schema","data","malli.core.validate","malli.error.humanize","malli.core.explain","schema/find-request","schema/article-query","schema/scopus-entry","schema/scopus-response","schema/internal-article","schema/server-config","cljs.core/pos-int?","schema/config","schema/find-request-parameters","schema/article-query-parameters","schema/find-response","schema/articles-response","integrant.core/init-key","_"],"sourcesContent":["(ns schema\n  (:require\n   [integrant.core :as ig]\n   [malli.core :as m]\n   [malli.error :as me]))\n\n(defn validate\n  [schema data]\n  (when-not (m/validate schema data)\n    (me/humanize (m/explain schema data))))\n\n(def find-request\n  [:map\n   [:word [:or :string [:vector :string]]]])\n\n(def article-query\n  [:map\n   [:q {:optional true} :string]\n   [:offset {:optional true} [:or :int [:re #\"^\\d+$\"]]]\n   [:limit {:optional true} [:or :int [:re #\"^\\d+$\"]]]])\n\n(def scopus-entry\n  [:map\n   {:closed false}\n   [:prism:publicationName :string]\n   [:prism:coverDate :string]\n   [:dc:creator :string]\n   [:prism:doi {:optional true} :string]])\n\n(def scopus-response\n  [:vector scopus-entry])\n\n(def internal-article\n  [:map\n   [:articles/publication_name :string]\n   [:articles/cover_date :string]\n   [:articles/creator :string]\n   [:articles/doi {:optional true} :string]])\n\n(def server-config\n  [:map\n   [:port pos-int?]\n   [:route-handler :any]])\n\n(def config\n  [:map\n   [:http-server/route-handler :any]\n   [:http-server/server :any]\n   [:services.db/spec :map]\n   [:services.db/ds :any]\n   [:services.db/execute! :any]\n   [:services.db/execute-honey! :any]])\n\n(def find-request-parameters\n  {:query find-request})\n\n(def article-query-parameters\n  {:query article-query})\n\n(def find-response\n  {:body [:map\n          [:new [:vector\n                 internal-article]]\n          [:existed [:vector internal-article]]]})\n\n(def articles-response\n  {:body\n   [:map\n    [:articles [:vector internal-article]]\n    [:total :int]]})\n\n(defmethod ig/init-key :schema/find-request-parameters [_ _] find-request-parameters)\n(defmethod ig/init-key :schema/article-query-parameters [_ _] article-query-parameters)\n(defmethod ig/init-key :schema/find-response [_ _] find-response)\n(defmethod ig/init-key :schema/articles-response [_ _] articles-response)\n"]}