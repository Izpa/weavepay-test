{"version":3,"sources":["articles/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","p__73059","vec__73060","cljs.core.nth","db","_","val","cljs.core.assoc","p__73064","vec__73068","p__73071","vec__73073","re_frame.core.reg_event_fx","p__73079","p__73080","map__73081","cljs.core/--destructure-map","cljs.core.get","vec__73082","page","current-page","new-page","or__4998__auto__","per-page","offset","query","params","cljs.core/not","malli.core.validate","schema/article-query","js/encodeURIComponent","ajax.core/json-response-format","p__73089","vec__73090","result","map__73093","articles","total","simplify","a","cljs.core.mapv","p__73094","p__73095","map__73096","vec__73097","max-page","x__5083__auto__","y__5084__auto__","js/Math.ceil","validated-page","parsed","js/parseInt","js/isNaN","x__5086__auto__","y__5087__auto__"],"sourcesContent":["(ns articles.events\n  (:require\n   [ajax.core :refer [json-response-format]]\n   [malli.core :as m]\n   [re-frame.core :as rf]\n   [schema :as schema]))\n\n(rf/reg-event-db :update-articles-filter\n                 (fn [db [_ val]] (assoc db :articles-filter val)))\n\n(rf/reg-event-db :update-articles-per-page\n                 (fn [db [_ val]] (assoc db :articles-per-page val)))\n\n(rf/reg-event-db :update-articles-page-input\n                 (fn [db [_ val]] (assoc db :articles-page-input val)))\n\n(rf/reg-event-fx\n :fetch-articles\n (fn [{:keys [db]} [_ page]]\n   (let [current-page (:articles-page db)\n         new-page (or page current-page)\n         per-page (:articles-per-page db)\n         offset (* (dec new-page) per-page)\n         query (:articles-filter db)\n\n         params {:q query :offset offset :limit per-page}]\n     (if-not (m/validate schema/article-query params)\n       {:db (assoc db :articles-error \"Invalid input\")}\n       {:db (-> db\n                (assoc :articles-error nil)\n                (assoc :articles-page new-page)\n                (assoc :articles-page-input (str new-page)))\n        :http-xhrio {:method :get\n                     :uri (str \"/articles?q=\" (js/encodeURIComponent query)\n                               \"&offset=\" offset \"&limit=\" per-page)\n                     :response-format (json-response-format {:keywords? true})\n                     :on-success [:articles-success]}}))))\n\n(rf/reg-event-db\n :articles-success\n (fn [db [_ result]]\n   (let [{:keys [articles total]} result\n         simplify (fn [a]\n                    {:title (:articles/publication_name a)\n                     :author (:articles/creator a)\n                     :date (:articles/cover_date a)\n                     :doi (:articles/doi a)})]\n     (assoc db :articles-list (mapv simplify articles)\n            :articles-total total))))\n\n(rf/reg-event-fx\n :change-page\n (fn [{:keys [db]} [_ new-page]]\n   (let [per-page (:articles-per-page db)\n         total (:articles-total db)\n         max-page (max 1 (js/Math.ceil (/ total per-page)))\n         validated-page (cond\n                          (string? new-page) (let [parsed (js/parseInt new-page)]\n                                               (if (js/isNaN parsed)\n                                                 (:articles-page db)\n                                                 (max 1 (min parsed max-page))))\n                          (number? new-page) (max 1 (min new-page max-page))\n                          :else (:articles-page db))]\n     {:dispatch [:fetch-articles validated-page]})))\n"]}