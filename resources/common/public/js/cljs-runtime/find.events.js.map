{"version":3,"sources":["find/events.cljs"],"mappings":";AAQA,yDAAA,zDAACA,4HACgB,WAAKC,GAAGC;AAAR,AAAW,yDAAA,4EAAA,9HAACC,+CAAOF,gEAAaG;;AAEjD,yDAAA,zDAACJ,mIACgB,cAAAK,HAAKJ;AAAL,AAAA,IAAAK,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASJ;UAAT,AAAAK,4CAAAD,WAAA,IAAA,jEAAWE;AAAX,AAAiB,yDAAA,6DAAA,WAAAC,1HAACN,+CAAOF;AAAR,AAAsB,OAACS,cAAI,AAACC,+CAAO,+CAAAF,iBAAA,hEAACG,oEAAWJ,KAAK,+CAAAC,/CAACG,gEAAS,OAAA,NAAKJ;;;AAErG,yDAAA,zDAACR,kIACgB,cAAAa,HAAKZ;AAAL,AAAA,IAAAa,aAAAD;QAAA,AAAAN,4CAAAO,WAAA,IAAA,/DAASZ;UAAT,AAAAK,4CAAAO,WAAA,IAAA,jEAAWN;UAAX,AAAAD,4CAAAO,WAAA,IAAA,jEAAeC;AAAf,AAAqB,6BAAA,mFAAA,zGAACC,mBAASf,mJAAcO,YAAKO;;AAEnE,yDAAA,zDAACE,oHAEA,WAAAC,SAAkBhB;AAAlB,AAAA,IAAAiB,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAalB;AAAb,AACE,IAAMqB,QAAM,AAACC,+CAAOC,4BAAW,AAAA,2FAAWvB;IACpCwB,SAAO,uNAAA,KAAA,AAAA,1MAAU,sEAAA,2CAAA,jHAACC,kDAAWC,oHAA2B,AAACjB,cAAIY;AADnE,AAGE,oBAAIG;AAAJ,kDAAA,gDACO,iDAAA,jDAACG,8CAAM3B,qEAAewB;;AAD7B,kDAAA,oTAAA,iEAAA,2CAAA,uDAAA,mDAAA,1dAEO,wDAAA,wEAAA,uDAAA,kEAAA,zPAACG,qDAAM3B,wdAEO,CAAA,SAAc,kDAAA,lDAAC4B,sDAAa,4CAAA,WAAAC,vDAACC;AAAD,AAAM,QAAA,oDAAa,mBAAAD,nBAACE;qBAJrE,iOAAA,iEAAA,mFAAA,6EAAA,gEAAA,mFAAA,vmBAI+FV,6FAC9D,+BAAA,2CAAA,8DAAA,xIAACW;;;AAIvC,yDAAA,zDAACjC,8HACgB,cAAAkC,HAAKjC;AAAL,AAAA,IAAAkC,aAAAD;QAAA,AAAA3B,4CAAA4B,WAAA,IAAA,/DAASjC;aAAT,AAAAK,4CAAA4B,WAAA,IAAA,pEAAWC;AAAX,mGACMnC,9CACA,iDAAA,jDAAC2B,sHAAoBQ,3KACrB,mLAAA,wEAAA,pPAACR;;AAExB,yDAAA,zDAAC5B,8HACgB,WAAKC,GAAGC;AAAR,AAAW,wDAAA,wEAAA,zHAAC0B,8CAAM3B","names":["re_frame.core.reg_event_db","db","_","cljs.core.update","cljs.core/conj","p__73055","vec__73056","cljs.core.nth","idx","p1__73054#","cljs.core/vec","cljs.core.concat","cljs.core.subvec","p__73063","vec__73065","val","cljs.core/assoc-in","re_frame.core.reg_event_fx","p__73077","map__73078","cljs.core/--destructure-map","cljs.core.get","words","cljs.core.remove","clojure.string/blank?","errors","malli.core.validate","schema/find-request","cljs.core.assoc","clojure.string.join","p1__73076#","cljs.core.map","js/encodeURIComponent","ajax.core/json-response-format","p__73085","vec__73086","result"],"sourcesContent":["(ns find.events\n  (:require\n   [ajax.core :refer [json-response-format]]\n   [clojure.string :as str]\n   [malli.core :as m]\n   [re-frame.core :as rf]\n   [schema :as schema]))\n\n(rf/reg-event-db :add-keyword\n                 (fn [db _] (update db :keywords conj \"\")))\n\n(rf/reg-event-db :remove-keyword\n                 (fn [db [_ idx]] (update db :keywords #(vec (concat (subvec % 0 idx) (subvec % (inc idx)))))))\n\n(rf/reg-event-db :update-keyword\n                 (fn [db [_ idx val]] (assoc-in db [:keywords idx] val)))\n\n(rf/reg-event-fx\n :do-find\n (fn [{:keys [db]} _]\n   (let [words (remove str/blank? (:keywords db))\n         errors (when-not (m/validate schema/find-request {:word (vec words)})\n                  \"Please enter at least one valid keyword.\")]\n     (if errors\n       {:db (assoc db :find-error errors)}\n       {:db (assoc db :find-loading? true :find-error nil)\n        :http-xhrio {:method :get\n                     :uri (str \"/find?\" (str/join \"&\" (map #(str \"word=\" (js/encodeURIComponent %)) words)))\n                     :response-format (json-response-format {:keywords? true})\n                     :on-success [:find-success]\n                     :on-failure [:find-failure]}}))))\n\n(rf/reg-event-db :find-success\n                 (fn [db [_ result]]\n                   (-> db\n                       (assoc :find-results result)\n                       (assoc :find-loading? false))))\n\n(rf/reg-event-db :find-failure\n                 (fn [db _] (assoc db :find-loading? false)))\n"]}